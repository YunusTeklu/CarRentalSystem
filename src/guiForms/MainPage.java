/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guiForms;

import connection.ConnectToDB;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Toshuiba
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        maintainMenu = new javax.swing.JMenu();
        carInfoMenuItem = new javax.swing.JMenuItem();
        customerInfoMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        supplierMenuItem = new javax.swing.JMenuItem();
        employeeMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        taskMenu = new javax.swing.JMenu();
        rentMenuItem = new javax.swing.JMenuItem();
        inspectionMenuItem = new javax.swing.JMenuItem();
        orderMenuItem = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        rentalReportMenuItem = new javax.swing.JMenuItem();
        orderReportMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adika: CarRentalSystem");
        setPreferredSize(new java.awt.Dimension(1360, 708));

        desktopPane.setBackground(new java.awt.Color(0, 51, 255));
        desktopPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guiForms/MainPage2.jpg"))); // NOI18N

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1385, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopPaneLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        desktopPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        maintainMenu.setMnemonic('f');
        maintainMenu.setText("Maintain");
        maintainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainMenuActionPerformed(evt);
            }
        });

        carInfoMenuItem.setMnemonic('o');
        carInfoMenuItem.setText("Car Info");
        carInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carInfoMenuItemActionPerformed(evt);
            }
        });
        maintainMenu.add(carInfoMenuItem);

        customerInfoMenu.setText("Customer Info");

        jMenuItem1.setText("Individual Customer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        customerInfoMenu.add(jMenuItem1);

        jMenuItem2.setText("Organizational Customer");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        customerInfoMenu.add(jMenuItem2);

        maintainMenu.add(customerInfoMenu);

        supplierMenuItem.setMnemonic('a');
        supplierMenuItem.setText("Supplier Info");
        supplierMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierMenuItemActionPerformed(evt);
            }
        });
        maintainMenu.add(supplierMenuItem);

        employeeMenuItem.setText("Employee Info");
        employeeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeMenuItemActionPerformed(evt);
            }
        });
        maintainMenu.add(employeeMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Log Out");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        maintainMenu.add(exitMenuItem);

        menuBar.add(maintainMenu);

        taskMenu.setMnemonic('e');
        taskMenu.setText("Task");
        taskMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskMenuActionPerformed(evt);
            }
        });

        rentMenuItem.setMnemonic('t');
        rentMenuItem.setText("Rent Car(s)");
        rentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentMenuItemActionPerformed(evt);
            }
        });
        taskMenu.add(rentMenuItem);

        inspectionMenuItem.setMnemonic('y');
        inspectionMenuItem.setText("Car Inspection");
        inspectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inspectionMenuItemActionPerformed(evt);
            }
        });
        taskMenu.add(inspectionMenuItem);

        orderMenuItem.setMnemonic('p');
        orderMenuItem.setText("Order");
        orderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderMenuItemActionPerformed(evt);
            }
        });
        taskMenu.add(orderMenuItem);

        menuBar.add(taskMenu);

        reportMenu.setMnemonic('h');
        reportMenu.setText("Report");

        rentalReportMenuItem.setMnemonic('c');
        rentalReportMenuItem.setText("Daily Rental Report");
        rentalReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentalReportMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(rentalReportMenuItem);

        orderReportMenuItem.setMnemonic('a');
        orderReportMenuItem.setText("Monthly Order Report");
        orderReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderReportMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(orderReportMenuItem);

        menuBar.add(reportMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        //System.exit(0);
        this.dispose();
        Login lg=new Login();
        lg.setLocation(300, 150);
        lg.setVisible(true);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void maintainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maintainMenuActionPerformed

    private void carInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carInfoMenuItemActionPerformed
        
        try {
            // TODO add your handling code here:
            MaintainCar mc= new MaintainCar(); 
            JTable tblCar=mc.getTable();
            DefaultTableModel dtm= (DefaultTableModel)tblCar.getModel();
            int carID=0;
            ResultSet rs= null;
            String sqlSearch="select * from car ";
            ConnectToDB ctb=new ConnectToDB();
            rs=ctb.read(sqlSearch);
            String engNo=null ,carBrand=null ,carCapacity=null ,carColor=null ,carModel=null ,carType=null ,availability=null;
            int carId, supId=0;
            
            while(rs.next())
            {
                carId=rs.getInt(1);
                engNo=rs.getString(2);
                carModel=rs.getString(3);
                carColor=rs.getString(4);
                carBrand=rs.getString(5);
                carType=rs.getString(6);
                carCapacity=rs.getString(7);
                availability=rs.getString(8);
                supId=rs.getInt(9);
                dtm.addRow( new Object [] {
                    carId, engNo, carModel, carColor, carType, carBrand,carCapacity , availability, supId}
                );
            }
            desktopPane.add(mc);
            mc.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_carInfoMenuItemActionPerformed

    private void supplierMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            MaintainSupplier ms= new MaintainSupplier();
            JTable tblSup=ms.getTable();
            DefaultTableModel dtm= (DefaultTableModel) tblSup.getModel();
            int supId=0;
            String supName=null, telephone=null, email=null,wereda=null,houseNo=null;
            String search="select * from supplier  ";
            ConnectToDB ctb= new ConnectToDB();
            ResultSet rs=null;
            rs=ctb.read(search);
            while(rs.next())
            {
                supId=rs.getInt(1);
                supName=rs.getString(2);
                email=rs.getString(3);
                telephone=rs.getString(4);
                wereda=rs.getString(5);
                houseNo=rs.getString(6);
                dtm.addRow(new Object [] {supId, supName, telephone, email, wereda, houseNo});
            }
            desktopPane.add(ms);
            ms.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_supplierMenuItemActionPerformed

    private void employeeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            MaintainEmployee me= new MaintainEmployee();
            JTable tblEmp=me.getTable();
            int empId=0;
            String search="select * from employee ";
            ResultSet rs= null;
            DefaultTableModel dtm=(DefaultTableModel) tblEmp.getModel();
            ConnectToDB ctb= new ConnectToDB();
            rs=ctb.read(search);
            String fName=null, mName=null, lName=null, role=null,
                    telephone=null, region=null, wereda=null, kebele=null, houseNo=null;
            while(rs.next())
            {
                empId=rs.getInt(1);
                fName=rs.getString(2);
                mName=rs.getString(3);
                lName=rs.getString(4);
                role=rs.getString(5);
                telephone=rs.getString(6);
                region=rs.getString(7);
                wereda=rs.getString(8);
                kebele=rs.getString(9);
                houseNo=rs.getString(10);
                dtm.addRow(new Object[] {empId,fName, mName, lName, role,
                    telephone, region, wereda, kebele, houseNo });
            }
            desktopPane.add(me);
            me.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_employeeMenuItemActionPerformed

    private void rentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentMenuItemActionPerformed
        // TODO add your handling code here:
        try{
            TaskRental tr= new TaskRental ();
            JTable tblRental=tr.getTable();
            DefaultTableModel dtm= (DefaultTableModel)tblRental.getModel();
            String dDate=null, rentalDate=null;
            float charge=0;
            int cusId =0, carId=0,empId=0;
           
            int rid=0;
            String searchid="select * from rental ";
            ResultSet rs= null;
            ConnectToDB ctb= new ConnectToDB();
            rs=ctb.read(searchid);
            while(rs.next())
            {
                rid=rs.getInt(1);
                rentalDate=rs.getString(2);
                dDate=rs.getString(3);
                charge=rs.getFloat(4);
                carId=rs.getInt(5);
                cusId=rs.getInt(6);
                empId=rs.getInt(7);
                dtm.addRow(new Object [] { rid,rentalDate,dDate,charge, cusId, carId, empId});
            }   
            
            
            String sqlSearch="select carId, engineNo,carModel,carColor, carBrand, carType, carCapacity from car where availability ='Available'";
            String  engineNo, carBrand, carType, carCapacity, carModel, carColor;
            ResultSet rs2=null;
            int noCars=0;
            JTable tblCar=tr.getTable2();
            DefaultTableModel dtm2=(DefaultTableModel)tblCar.getModel();
            rs2=ctb.read(sqlSearch);
            while(rs2.next())
            {
                carId=rs2.getInt(1);
                engineNo=rs2.getString(2);
                carModel=rs2.getString(3);
                carColor=rs2.getString(4);
                carBrand=rs2.getString(5);
                carType=rs2.getString(6);
                carCapacity=rs2.getString(7);
                dtm2.addRow(new Object[] {carId, engineNo,carModel,carColor, carBrand, carType, carCapacity });
                noCars++;
            }  
         desktopPane.add(tr);
        tr.setVisible(true);
         } catch (SQLException ex) {
            Logger.getLogger(TaskRental.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rentMenuItemActionPerformed

    private void inspectionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inspectionMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            
            TaskInspection ti= new TaskInspection ();
            JTable jTable1=ti.getTable();
            DefaultTableModel dtm= (DefaultTableModel) jTable1.getModel();
            int insId=0, cid=0, eid=0;
            String search="select * from carInspection";
            String carStatus= null, carPath=null, insDate=null, da=null;
            float md=0;
            ResultSet rs=null;
            ConnectToDB ctb= new ConnectToDB();
            rs=ctb.read(search);
            while(rs.next())
            {
                insId=rs.getInt(1);
                carStatus=rs.getString(2);
                carPath=rs.getString(3);
                insDate=rs.getString(4);
                da=rs.getString(5);
                md=rs.getFloat(6);
                cid=rs.getInt(7);
                eid=rs.getInt(8);
                dtm.addRow(new Object [] { insId, carStatus, carPath,insDate, md, da , cid, eid});
            }   desktopPane.add(ti);
            ti.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inspectionMenuItemActionPerformed

    private void orderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            TaskOrder to= new TaskOrder ();
            JTable tblOrd=to.getTable();
            DefaultTableModel dtm=(DefaultTableModel) tblOrd.getModel();
            int orderId=0;
            String ordStatus=null,delDate=null,orderDate=null,carModel=null;
            int supId=0,noCars=0;
            String search="select * from supplierOrder ";
            ResultSet rs= null;
            ConnectToDB ctb=new ConnectToDB();
            rs=ctb.read(search);
            while(rs.next())
            {
                orderId=rs.getInt(1);
                ordStatus=rs.getString(2);
                orderDate=rs.getString(3);
                delDate=rs.getString(4);
                carModel=rs.getString(5);
                noCars=rs.getInt(6);
                supId=rs.getInt(7);
                dtm.addRow(new Object [] {orderId,ordStatus,orderDate, delDate, carModel, noCars, supId} );
            }
            desktopPane.add(to);
            to.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_orderMenuItemActionPerformed

    private void rentalReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentalReportMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            ReportRent rf= new ReportRent();
            JTable tblRent=rf.getTable();
            Date od= new Date();
            SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yy");
            String today= sdf.format(od);
            String fullname=null,fName=null,mName=null,lName=null,carBrand=null,searchDate,searchCar,searchEmp, rDate ,dDate, caName, cuName,empName;
            
            int rid, caid, cuid, emid, noCars=0;
            float charge, totRev=0;
            ResultSet rs=null,rs2=null, rs3=null,rs4=null;
            
            searchDate="select * from rental where rentalDate = '"+today+"'";
            DefaultTableModel dtm=(DefaultTableModel)tblRent.getModel();
            ConnectToDB ctb=new ConnectToDB();
            rs=ctb.read(searchDate);
            while(rs.next())
            {
                rid=rs.getInt(1);
                rDate=rs.getString(2);
                dDate=rs.getString(3);
                charge=rs.getFloat(4);
                caid=rs.getInt(5);
                cuid=rs.getInt(6);
                emid=rs.getInt(7);
                noCars++;
                totRev+=charge;
                searchCar="select carBrand from car where carId="+caid+" ";
                rs2=ctb.read(searchCar);
                while(rs2.next())
                {
                    carBrand=rs2.getString(1);
                }
                searchEmp="select firstName,middleName,lastName from employee where employeeId="+emid+" ";
                rs3=ctb.read(searchEmp);
                while(rs3.next())
                {
                    fName=rs3.getString(1);
                    mName=rs3.getString(2);
                    lName=rs3.getString(3);
                }
                fullname=fName+" "+mName+" "+lName;
                dtm.addRow(new Object [] { rid,rDate,dDate,charge,carBrand,cuid,fullname});
            }
            desktopPane.add(rf);
            rf.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rentalReportMenuItemActionPerformed

    private void orderReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderReportMenuItemActionPerformed
        // TODO add your handling code here:
        try{
         ReportOrder rp= new ReportOrder();
         JTable tblOrd=rp.getTable();
         String showAll="select * from supplierOrder where orderStatus = 'Delivered'";
            int orderId,noCars, supId, tnc=0;
            String searchSup, supName=null;
            String ordStatus,orderDate, deliveryDate, carModel;
            ResultSet rs=null, rs2= null;
            DefaultTableModel dtm=(DefaultTableModel)tblOrd.getModel();
            ConnectToDB ctb=new ConnectToDB();
            ConnectToDB ctb2=new ConnectToDB();
            rs=ctb.read(showAll);
            while(rs.next())
            {
                orderId=rs.getInt(1);
                ordStatus=rs.getString(2);
                orderDate=rs.getString(3);
                deliveryDate=rs.getString(4);
                carModel=rs.getString(5);
                noCars=rs.getInt(6);
                supId=rs.getInt(7);
                tnc+=noCars;
                searchSup="select supplierName from supplier where supplierID="+supId+" ";
                rs2=ctb2.read(searchSup);
                while(rs2.next())
                {
                    supName=rs2.getString(1);
                }
                dtm.addRow(new Object [] { orderId, ordStatus, carModel, noCars, orderDate, deliveryDate, supName});
            }Integer totNum=tnc;
            JTextField tn=rp.getTxt();
            tn.setText(totNum.toString());
        desktopPane.add(rp);
        rp.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_orderReportMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        MaintainIndividual mi= new MaintainIndividual();
        JTable tblInd=mi.getTable();
        
         desktopPane.add(mi);
        mi.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        MaintainOrganizatiom mof= new MaintainOrganizatiom();
        desktopPane.add(mof);
        mof.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void taskMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskMenuActionPerformed
    
    // Getter Methods for the menu items
    
    public JMenuItem getCarInfo()
    {
        return carInfoMenuItem;
    }
    
    public JMenu getCustomerInfo()
    {
        return customerInfoMenu;
    }
    
    public JMenuItem getSupplierInfo()
    {
        return supplierMenuItem;
    }
    
    public JMenuItem getEmployeeInfo()
    {
        return employeeMenuItem;
    }
    
    public JMenuItem getRental()
    {
        return rentMenuItem;
    }
    
    public JMenuItem getOrder()
    {
        return orderMenuItem;
    }
    
    public JMenuItem getInspection()
    {
        return inspectionMenuItem;
    }
    
    public JMenuItem getRentalReport()
    {
        return rentalReportMenuItem;
    }
    
    public JMenuItem getOrderReport()
    {
        return orderReportMenuItem;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem carInfoMenuItem;
    private javax.swing.JMenu customerInfoMenu;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem employeeMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem inspectionMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu maintainMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem orderMenuItem;
    private javax.swing.JMenuItem orderReportMenuItem;
    private javax.swing.JMenuItem rentMenuItem;
    private javax.swing.JMenuItem rentalReportMenuItem;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JMenuItem supplierMenuItem;
    private javax.swing.JMenu taskMenu;
    // End of variables declaration//GEN-END:variables

}
